#summary Document Search in SemanticVectors.

= Document Search in SemanticVectors =

It's easy to search for documents in SemanticVectors, by telling the search program to use an appropriate vector store. This means that there is no special class or interface for searching documents - this functionality is provided by enabling the more general freedom to take query terms and search over a variety of different vector stores.

The query file is set using the `-queryvectorfile` option and the search file is set using the `-searchvectorfile` options.

=== Searching for Documents using Terms ===

The default `BuildIndex` command build both term vectors (`termvectors.bin`) and document vectors (`docvectors.bin`). To search for document vectors closest to the vector for `Abraham`, you would therefore use the command:

{{{java pitt.search.semanticvectors.Search -queryvectorfile termvectors.bin -searchvectorfile docvectors.bin Abraham}}}

=== Using Documents as Queries ===

You can also use the document file as a source of queries. For example, to find terms most closely related to Chapter 1 of Genesis, you'd use

{{{java pitt.search.semanticvectors.Search -queryvectorfile docvectors.bin -searchvectorfile termvectors.bin -matchcase bible_chapters/Genesis/Chapter_1}}}

(With default settings, this brings up pretty generic terms like "unto", "i", "them, "have". Not exactly sure why this is so.)

=== Lucene Term Weighting ===

Any term weighting for documents is computed when the document vectors are created, as part of the index building process. So giving a `---luceneindexdir` argument when using documents as queries will not help you at all, and can cause SemanticVectors to discard your query terms (since, for example, `/files/file1.txt` isn't a term that the Lucene index recognizes). 

=== Document Filtering ===

Filtering search results based on some regular expression can be particularly useful for restricting document searches to specific parts of a corpus. See FilteredSearchResults.