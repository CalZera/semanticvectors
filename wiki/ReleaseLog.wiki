#summary Release Log
#labels Phase-Implementation

Even-numbered versions are releases. Odd-numbered versions are in development. It follows that the most recent code and the `build.xml` file in the SVN repository is always odd-numbered.

=== Version 1.14 ===

Main feature addition is that of permutation and directional indexing and search (see PermutationSearch). This is a new method for encoding and decoding word order in vector space models, introduced by [http://www.sics.se/~mange/papers/permutationsCogSci08.pdf Sahlgren et al (2008)]. Thanks to Trevor Cohen for the implementation in SemanticVectors.

Other work has been to improve exception handling so that SemanticVectors can be used as a library by other Java applications, in particular [http://www.activemath.org ActiveMath]. SemanticVectors now has no hard-coded System.exit() calls, but throws standard exceptions and one new ZeroVectorException. Thanks to Dominik Jednoralski for leading this effort.

=== Version 1.12 ===

*Indexing Improvements*

Added IncrementalDocVectors, which enables document vectors to be built for large collections whose document vectors won't fit in memory. 

Added support for training cycles, which enables vectors to be learned in several iterations by substituting learned vectors for initial random term or document vectors.

*Search Improvements*

Added support for -results command line flag; behavior consistent with similar usage in ClusterResults.

Added much more documentation for search options.

*Infrastructure Improvements*

Added more vector store options (including VectorStoreSparseRAM) and refactored vector building classes to be able to use different kinds of basic vector stores as appropriate.

Added VectorUtils for converting between sparse (short[]) and full (float[]) vectors.

=== Version 1.10 ===

2008-05-27

Mainly a cleanup of version 1.8 - some javadoc and classnames were improved.

Also added some extra weighting options in search to use Lucene utils to demote results from terms with low inverse document frequency.

Also added a routine to cluster all vectors in a particular datastore (rather than relying on results to have been generated by searching).

=== Version 1.8 ===

2008-05-19

As well as the 1.7 changes described below, PositionalIndexes (HAL / context window) functionality was added by Trevor Cohen.

=== Version 1.7 (devel) ===

Many changes have been made, initially for the Oxford presentation and SemanticVectors paper, and clustering for the UPitt collaboration.

   # `VectorSearcher.java` and `Search.java` classes have been significantly refactored.
      # The separate `VectorSearcher` implementations (Sum, Tensor, etc.) now do a lot more of the query parsing and initialization work.
      # `VectorSearcher.getScore()` no longer takes a `queryVector` and `testVector`: the query statements are now built into the state of the `VectorSearcher`, and only a `testVector` is needed for `getScore()`.
      # A command-line option `-searchtype` enables the user to state a value which tells `Search.java` which kind of VectorSearcher to create.
      # The Tensor and Convolution options take their training relations as tilde separated pairs, e.g., `java pitt.search.semanticvectors.Search -searchtype tensor abraham~sarah joseph~mary ahab`. (Ideally this would give the top result `jezebel`, but doesn't ...)
   # Clustering functionality is provided by `ClusterResults.java`. Clustering is done after search, there is as yet no interface for providing a list of terms to get vectors for and cluster, though this would be easy to do.
   # Also, a `BuildModel` class has been added - I'd like to deprecate `BuildIndex` in favour of `BuildModel` to avoid confusion with Lucene indexing.

=== Release 1.6 ===

2008-03-18

   # Bilingual models implemented - see BilingualModels.
   # Plain text interchange format and tools implemented - see VectorStoreFormats.
   # `build.xml` changed so that the source distributions ship with just `src/` directory and build file: the rest is automatically generated and there seems to be no good reason for taking any more bandwidth.
   # Beginnings of a testing suite have been created. Tests don't ship with the main package, and should be checked out by developers from svn.

=== Release 1.4 ===

2008-02-08

Two main improvements.

   # Setting of dimensions, seedlength and minimum term frequency all done using command line arguments (see `BuildIndex`). Number of dimensions is now stored in a small header for vector files created by `VectorStoreWriter`, and this is read by `VectorStoreReader`. If absent, `VectorStoreReader` tries the default value (200) or failing that, dies and tells you to rebuild indexes. So there is some backwards compatibility with indexes made with older versions of the software, but some indexes will need to be rebuilt. Thanks to Trevor Cohen for most of these improvements.

   # Query building code is now equipped with negation, supporting the same functionality as Infomap-NLP. `CompoundQueryBuilder` parses queries and sees if they have a "NOT" term in them, `VectorUtils` has the function for orthogonalizing these query sets.

=== Release 1.2 ===

2008-01-30

The main improvement is the redesign of `TermVectorsFromLucene` to use a sparse representation for the basic document vectors (`basicDocVectors`). These are now represented by arrays of short int values which list the non-zero +1 and -1 entries in a `basicDocVector`. The term vector building routine in the main constructor, and the `generateRandomVector` method, have been refactored accordingly. 

This change gives a major reduction in memory requirements, in one practical example reducing the RAM requirement from 7.3G to 1.1G for the corpus. It also speeds things up
further and should maintain the same memory requirement regardless of
vector length as long as seed length stays constant. Many thanks to Trevor Cohen for these  improvements.

Unfortunately Dominic accidentally left an old copy of `TermVectorsFromLucene.java` in the main directory from which this version was bundled, and only noticed this inclusion after the package was shipped. Please ignore / delete this file.

=== Release 1.0 ===

2007-11-29

The main new feature is the refactoring of the search code to use an abstract `VectorSearcher` class. This implements the main nearest neighbor search, but leaves the scoring function unspecified. This enables developers to quickly test new scoring methods.

Scoring methods implemented so far include cosine similarity and two product similarities, tensor and convolution. (This has led us to realize some features of tensor product similarity which should have been mathematically obvious.)

=== Release 0.8.4 ===

2007-10-30

At the request of one research user, added the `CompareTerms` class and command line interface to enable term-term comparison. Also refactored query vector generation, adding the `CompoundVectorBuilder` class which both `Search` and `CompareTerms` use.

Also improved javadoc.

User reported that everything worked - again good news.

=== Release 0.8.2 ===

2007-10-25

This was the first public release of the software. 
There were about a dozen downloads, and so far so good - no bug reports at all!