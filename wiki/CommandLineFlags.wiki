#summary Command line flags in SemanticVectors - Developer guide.

=The Current Flag-Parsing System=

==Overview==

Flags can be added to the FlagConfig class, they are automatically parsed, and can then be accessed from an appropriate FlagConfig instance.

The benefit of the system is that it's very easy to add and use new flags. This encourages people to experiment with semantic vectors, but it doesn't make sharing your improvements as easy and reliable as we would like.

==List of Flags==

See the [http://semanticvectors.googlecode.com/svn/javadoc/latest-stable/pitt/search/semanticvectors/FlagConfig.html Javadoc].

==Current Status (Instance Flag Variables)==

The code checked in version 3.8 makes a flag config instance rather than using global variables. This provides some more encapsulation, so that (for example) opening two vector stores with different dimension settings doesn't lead to a conflict. (Provided, of course, that the callers don't try to share the same flag config instance.)

==Previous Status (Global Flag Variables)==

The existing flags parsing system was released in version 1.20. It creates public global variables for all Flag values. This is easy to set up, but has clear drawbacks, e.g., configuration state gets shared between different queries and indexing jobs run in the same JVM, which may not be desirable. The immediate problem with this is that is causes tests to break unless each flag is carefully reset.

Improvements are being discussed and (slowly) worked on.

== Motivation ==

When the project started, we just had a couple of programs (BuildIndex and Search) that had their own `main()` functions, and it was easy to have them each parse their command line arguments.

Now the package has grown, we have a lot more programs, a lot more `main()` functions, and a lot more configurable arguments. So it's appropriate for BuildIndex, Search, BuildPositionalIndex, ClusterResults, and ClusterVectorStore, all to say (for example) that they'd like to use a text rather than a lucene vector file format. Having each of these programs look after parsing overlapping command line arguments led to unnecessary code repetition, with all the problems of poor maintainability and sometimes lack of synchronization that you would expect.

== Solution ==

The [http://semanticvectors.googlecode.com/svn/javadoc/latest-stable/pitt/search/semanticvectors/Flags.html Flags] class looks after:

  * Representing publicly all variables that can be set at the command line.
  * Parsing command line arguments to extract these variables and leave the rest of the arguments to the caller.

In order to create and use a new command-line flag anywhere in the package, all a developer has to do is:
  # Define the flag as a public field in Flags.java.
  # Add the line `args = Flags.parseCommandLineFlags(args);` at the beginning of their `main(String[] args)` function.

For example, to create a command-line configurable variable to represent the dimension of the vector space used, you'd add the line `public static int dimension;` to Flags.java. Then any program that calls `Flags.parseCommandLineFlags(args);` will interpret the arguments `-dimension 500` as a directive to set the value of the public `Flags.dimension` variable to 500.

One side effect of this policy is that flags can be set in any of the programs and used anywhere in the rest of the package codebase. For example, you can now give the instruction to use `-vectorfileformat text` anywhere, and this can be used anywhere else to determine which VectorStore implementation to use. This is powerful but dangerous: it's a big violation of encapsulation principles, but in some cases this may be justified as it rapidly speeds up development (e.g., because the developer doesn't have to figure out how to pass the new variable throughout the call stack to where it is used).

===Potential Additions===

  * Default values. This is probably a no-brainer: the declaration `public static int dimension = 200;` is a reasonable way to set default values.
  * Allowed values for strings. Several string arguments only take certain enumerated arguments (e.g., `searchtype`). It would be reasonably easy to add support for enumerations of allowed values for string variables.
  * Descriptions. Could be added and displayed to the user if there is a `-help` argument.

==Pros and Cons and Alternatives==

  * Why write your own Flags library instead of using an existing one?
    * Because it's easy to do, we don't need to support very much, and it reduces external dependencies. I think we can actually make the shipped package smaller rather than bigger with the design outlined here.

  * Aren't global public writeable variables dangerous?
    * Yes. But useful. For what is currently a research project as much as a production implementation, it's arguably worthwhile to give the rapid development benefits outlined earlier. It will place some limitations on the scalability of the codebase, but our goal is to support repid development for a small group of developers and researchers, not to produce a codebase with millions of lines of code shared by hundreds of developers.

==Non-goals==

So far the design is entirely syntactic. Anything about the semantics of the global variables (i.e., how they are to be used) is outside the purview of this design.

Including enumerations of allowed values for strings, goes one step beyond purely type-level syntax. You could imagine adding predicates that test integer values for semantic correctness as well (e.g., "-dimension" should be greater that zero). Once you have combinations of variables needed to define correctness (e.g., seedlength must be less than or equal to half of dimension), it would be really hard to build this into the Flags class itself.

==How will this affect me?==

If you're a SemanticVectors user but not a developer, it won't affect you at all, except that we will almost certainly be changing some of the flag names. Using `-d` for dimension was fine when we had just a couple of flags, but it just doesn't work any more given how many flags we have and how hard it is to remember them all. 

If you have wrapper scripts using old flag names, these will need to be updated.

If you're a SemanticVectors developer, it will make it much easier and quicker to prototype new configurable features. Please use your new power wisely!









 